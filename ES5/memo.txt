분리할때 defer 속성 작성 : body를 렌더링 한 후에 Js 파일 가져오므로 body 요소를 가져와도 오류 안남
문장 : JS 코드 실행 단위
       세미콜론(;) 까지 하나의 문장
       들여쓰기 칸 수는 개발자의 취향. 
       일반적으로 2칸, 4칸 

주석 작성의 목적: 
코드가 목적을 달성하기 위한 
- 기능,시나리오 등을 생각하고 정리하는 것 
이것을 문법에 맞추어 작성한 것이 코드 

코드를 작성하기 전에
- 우선 먼저 정리한 생각을 주석으로 작성 
- 어렵지만 처음 배울 때부터 습관화 
주석 작성 기준 
- 코드의 목적, 결과가 미치는 영향을 작성 
- 다른 사람이 알 수 있도록 자세하게 작성 

주석사례 
/**
*@function calculateAmount
*1. 파라미터로 받은 수량에 단가를 곱해
* 금액을 계산하고 결과 값을 반환한다. 
*2. 수량과 단가의 0 체크는 
* 함수를 호출하기 전에 하므로 체크하지 않는다.
*@oaram {Number} quantity , 수량
*@param {Number} price , 단가
*@return {Number} 계산 결과
*/

강좌에서 오브젝트
=> new 연산자를 사용하지 않고 
빌트인 오브젝트로 만든 오브젝트를 지칭
new 연산자를 사용하면 인스턴스라 함


parseInt() 정수로 변환하여 반환
px 를 제외해야 할때 ex width : 30px ; 
parseInt(24px) => 24 반환 


/*
엔진 관점의 핵심 키워드
함수가 실행되었을때 묶음 -> Execution Context
식별자 해결 Identifier Resolution => Context 안에 넣어둔걸 찾고, 실행한다. 

하나의 묶음으로 가져가서 찾는다 
*/ 
/*
function 오브젝트 생성 
var func = function(){..}
엔진이 function 키워드를 만나면 
- 빌트인 Function 오브젝트의 
- prototype 에 연결된 메소드로 
- function 오브젝트 생성 
생성된 오브젝트를 func 변수에 할당
func() 형태로 호출 
- function 오브젝트이므로 호출할 수 있는것 

함수를 호출하려면 
- 생성한 function 오브젝트를 저장해야 함 

function 오브젝트 저장 형태 
- {name:value} 형태로 저장
- {func : 생성한 function 오브젝트} 형태

함수를 호출하면 
1. 저장된 오브젝트에서 함수 (func)이름으로 검색 => 식별자 처리
2. value 값을 구하고 
3. value 가 function 오브젝트이면 호출 

함수가 호출되면 엔진은 
- 함수의 변수와 함수를
{name:value} 형태로 실행 환경을 설정하고 함수 코드를 실행 
{name: vlaue} 형태로 생각을 전환해야 
- Js의 아키텍쳐(구조)와 메커니즘을 쉽게 이해 가능

function(){}코드를 보면 
- 함수의 변수와 함수가 {name:value} 형태로 연상되어야 함 

__proto__ => 객체의 메소드 6개 

prototype 에 __proto__ 오브젝트 첨부 

[ function 오브젝트 생성 과정 ]
1. functuon func(){...} 형태에서 
- function 키워드를 만나면 
2. 오브젝트를 생성하고 저장 
- {func : {...}}
- func 는 function 오브젝트 이름.
- 오브젝트 {...} 에 프로퍼티가 없는상태 => 오브젝트를 채우기 
3. func 오브젝트에 prototype 오브젝트를 첨부 
4. prototype 에 constructor 프로퍼티 첨부 
- prototype.constructor 가 func 오브젝트 참조
5. prototype 에 __proto__ 오브젝트 첨부 
func = {
       prototype : {
              constructor : func,
              __proto__ : P{ }
       }
} 
6. 빌트인 Object.prototype 의 메소드로 
- Object 인스턴스를 생성하여
- prototype.__proto__ 에 첨부
7. func 오브젝트에 __proto__ 오브젝트 첨부 
- func.__proto__ 구조
8. 빌트인 Function.prototype 의 메소드로 
-function 인스턴스를 생성하여   
-func.__proto__ 에 첨부 

9. func 오브젝트 프로퍼티에 초기값 설정
- arguments,caller,length,name 프로퍼티 

func = {
       arguments : {},
       caller : {},
       length: 0,
       name :"sports",
       prototype : {
              constructor : func,
              __proto__ : Object.prototype
       },
       __proto__ : Function.prototype (Array,String 등 인스턴스 타입에 따라 유동)
}


function 오브젝트에 prototype 이 있으며 
- constructor가 연결됨. 
- __proto__가 연결되어 있으며
- Object인스턴스가 연결됨. 
function 오브젝트에 __proto__가 있으며 
- Function 인스턴스가 연결됨. 
- Array 이면 Array 인스턴스가 연결되고 
- String 이면 String 인스턴스가 연결됨. 

[함수 실행 환경 인식]
실행 환경 설정 시점 
- function 키워드를 만나 function 오브젝트를 생성할 때 
설정하는 것 
- 실행 영역(함수가 속한 스코프)
- 파라미터, 함수 코드 등 

[함수 실행 환경 저장]
function 오브젝트를 생성하고 바로 실행하지 않으므로 
함수가 호출되었을 때 사용할 수 있도록 환경을 저장해야
=>생성한 function 오브젝트에 저장 

인식한 환경을 function 오브젝트의 내부 프로퍼티에 설정 - 
- {name : value} 형태로 
[ 내부 프로퍼티 ]
공통 프로퍼티 , 선택적 프로퍼티로 분류 
엔진이 내부 처리에 사용하는 프로퍼티
스펙 표기로 외부에서 사용 불가 
스펙 표기 
- [[프로퍼티 이름]] 형태 ex) [[Scope]]

공통 프로퍼티 
- 모든 오브젝트에 공통으로 설정되는 프로터피 
선택적 프로퍼티 
- 오브젝트에 따라 선택적으로 설정되는 프로퍼티 
- 해당되는 오브젝트에만 설정 


[엔진 해석 순서]
자바스크립트는 스크립팅 언어 
- 스크립팅 언어는 작성된 코드를 위에서부터 한 줄씩 해석(환경설정)하고 실행
- 하지만 자바스크립트는 다름 
중잔에 있는 코드가 먼저 해석될 수도 있음 
첫번째, 함수 선언문을 순서대로 해석 
- function sports(){};
두 번째, 표현식(변수 형태로 나타낸것 전부 표현식) 을 순서대로 해석 
var value = 123;
var book = function(){}; 


[엔진 처리 상태]  
function book(){   
       log(title);  
       log(readBook);
       log(getBook);
       debugger;
       var title = "Js 책";
       function getBook(){
              return title;
       };
       var readBook = function(){};
       getBook()
};
book();
=> 실행 결과
undefinded
undefinded
function getBook(){return title; }

1. 마지막 줄에서 book() 함수를 호출하면 debugger에서 실행이 멈춤
2. title,readBook 값음 undefined
3. getBook은 function 오브젝트
4. getBook이 function 오브젝트라는 것은 
- function getBook(){} 을 해석한 것을 뜻합니다
5. title, readBook 에 설정된 undefined 도 값이며
- 값이 있다는 것은 엔진이 해석한 것을 뜻합니다. 
- 해석하지 않으면
 - title, readBook 값이 표시되지 않습니다. 

 [함수 코드 해석 순서] 

 1. 함수 선언문 해석   --> 1번째 돌때 
 - function getBook(){};
 2. 변수 초기화       --> 2번째 돌때 
 - var title = undefined;
 - var readBook = undefined;
 3. 코드 실행        --> 3번재 돌때 debugger 만남. (위 코드)
 - var title = "JS책";
 - var readBook = function(){};
 - getBook(); 

[1] 함수 선언문 해석
1. 마지막 줄에서 book() 함수를 호출합니다. 
2. 엔진 제어가 book 함수의 첫 번째 줄로 이동 
- debugger 를 실행하지 않습니다 
3. 함수 안에서 함수 선언문을 찾습니다 
- 위에서 아래로 내려가면서 하나씩 검색 
4. function getBook(){} 이 함수 선언문 이므로 
- function 오브젝트를 생성합니다. 
5. 더 이상 함수 선언문이 없으므로 
- 다시 함수의 첫 번째 줄로 이동합니다. 

[2]변수 초기화 
6. debugger 를 실행하지 않습니다. 
7. var title = "JS책" ;
- title 변수에 undefined 를 할당합니다. 
- "JS책" 을 할당하지 않습니다. 
8. function getBook(){} 은 
- 초기화를 했으므로, 초기화하지 않습니다. 
9. var readBook = function(){};
- readBook 변수에 undefined 를 할당합니다.  -> readBook을 스코프 아이디로 하고 값은 undefinded로 해서 스코프에 등록 
- 함수 표현식은 변수를 선언만 합니다. 
10. 여기까지가 초기화 단계이며
- 다시 함수의 첫 번째 줄로 이동합니다. 

[코드 실행]
1. debugger 를 실행하며, 실행이 멈춥니다. 
2. var title = "JS책";
- title 변수에 "JS책" dmf gkfekdgkqslek. 
3. function getBook(){return title}; 
- 실행이 아닌 선언이므로, 다음 줄로 이동 
4. var readBook = function(){};
- function 오브젝트를 생성하여 
  readBook 변수에 할당 
- readBook 이 function 오브젝트가 되므로 
  이제 readBook함수를 호출할 수 있습니다. 
5. getBook() 함수를 호출합니다. 
-  지금까지와 같은 순서와 방법으로 
   getBook() gkatndml 함수와 변수를 초기화하고 코드를 실행 +


함수 앞에서 호출 - 호이스팅 
함수 선언문은 초기화 단계에서 
- function 오브젝트를 생성하므로 
- 어디에서도 함수를 호출할 수 있음 
함수 앞에서 호출 가능 
- 호이스팅 Hoisting 이라고 함
- 용어보다 개념으로 접근
초기화 단계에서 
- 값이 있으면 초기화하지 않음 

var result = book();
console.log(result);

function book(){
       return "호이스팅";
};
book = function(){
       return "함수 표현식";
};
1. 함수 선언문 function book() 오브젝트 생성 => 값이 있음 
2. result = undefined book = 이미 book 오브젝트가 있음 => 값이 있으면 초기화 하지 않음 
3. result = book() 함수 실행 => 호이스팅 받고 log 찍음 
=> book =function(){} 이 2번째 돌때  undefinded 로 초기화된 상태가 book() 이라면
이런 출력 안나옴, 값이 있으면 초기화 하지 않기 때문에 function book(){} 의 return 값 호이스팅이 나온것 

=> 내려가다가 {name : value} 형태인데 리턴값이 있으면 그걸로 대체 

[오버로딩] 

오버로딩 형태 
function book(one){};
function book(one,two){};
function book(one,two,three){}; 
book(one,two); 

함수 이름이 같더라도 
- 파라미터 수 또는 값 타입이 다르면 각각 존재 
함수를 호출하면 
- 파라미터 수와 값 타입이 같은 함수가호출됨

Js 는 오버로딩을 지원하지 않음 !! 
- Js 는 파라미터 수와 값 타입을 구분하지 않고 
- {name:value} 형태로 저장하기 때문

Argument 처리 구조 
파라미터를 {key:value} 형태로 저장 
- 파라미터 수만큼 0 번부터 인덱스 부여 
- key 로 사용 
- 파라미터로 받은 값을 value 에 설정 
- {0:param1, 1:param2}
Array-like => 객체의 프로퍼티 형태이지만, Array 처럼 사용할 수 있다는 프로퍼티 
- key 값이 0 부터 1씩 증가 
- length 프로퍼티가 있어야 함 

function get(){
       return arguments;
};
log(get("A","B"));

[스코프]
범위를 제한하여 
-식별자를 해결하려는 것
- 스코프에서 식별자를 해결 
식별자 해결 Identifier Resolution
- 변수이름, 함수 이름을 찾는 것 
- 이떄 스코프를 사용
- 이름을 찾게 되면 값을 구할 수 있음 (등록과 검색)
- 크게는 이름을 설정하는 것도 식별자 해결 
스코프는 식별자 해결을 위한 것 !! 

스코프 설정
funtion book(){
       var point = 123;
       function get(){
              console.log(point);
       };
       get();
};
book();
1. 엔진이 function book(){} 를 만나면 
2. function 오브젝트를 생성하고 
3. 스코프를 설정 
- 생성한 function 오브젝트의 
- [[scope]] 에 스코프를 설정 
- 즉, 이때 스코프가 결정

function 오브젝트르 만드는 시점에 스코프를 결정 : 정적 스코프
호출할 때 스코프 결정 : 동적 스코프 

4. JS 의 스코프 설정 메커니즘. => 생성할 때 스코프 결정한다.
5. 마지막 줄에서 book() 함수를 호출 
6. 엔진 컨트롤이 book 함수 안으로 이동 
7. 함수 안에서 함수 선언문 찾음 
- function get(){} 을 만나게 되며
- function 오브젝트를 생성
8. 스코프를 설정
- function 오브젝트의
- [[Scope]] 에 스코프를 설정

9. get() 함수 호출


[글로벌 오브젝트]
var value = 100; 
- 100 을 value 변수에 할당한 것은 
- value 로 검색하여 값을 사용하기 위한 것 
함수 안에 변수를 선언하면 
- 변수가 함수에 속하게 됨 
value 변수를 함수 안에 작성하지 않았음 
- value 변수가 속하는 오브젝트가 없으며 
- 이때, 글로벌 오브젝트에 설정.
이런 매커니즘을 구현할 수 있는 것은 
- 글로벌 오브젝트가 하나만 있기 때문

var value = 100;  //속하는 오브젝트가 없음 => 글로벌 오브젝트에 설정됨
function book(){
       var point = 200;  //book 오브젝트에 point 변수가 속함 
       return value;
};
book();

[글로벌 스코프]
글로벌 오브젝트가 글로벌 스코프 
오브젝트는 
- 개발자 관점으로 오브젝트에 함수와 변수를 작성
스코프는
- 식별자 해결을 위한 것으로 
- 엔진 관점
글로벌 스코프는 최상위 스코프 
- 함수에서 보면 최종 스코프
- 식별자 처리를 위해 스코프를 계층적으로 올라가다가 최종 글로벌까지올라가는것

function book(){코드}에서 
- book 함수가 속한 오브젝트가 없으므로 
- book 함수가 글로벌 오브젝트에 설정됨 
 -글로벌 함수
 var value = 100;
 - value 변수가 글로벌 오브젝트에 설정
- 글로벌 변수 
글로벌 오브젝트에 설정된다는 것은 오브젝트 관점
스코프와 식별자 해결 관점은 
- Scope 가 글로벌 스코프라는 것

var value = 100;
function book(){
       return value;
};
book();

book(); 
- book 함수를 호출하려면 
- 오브젝트.book(); 형태로 작성해야 하는데 
- 글로벌 오브젝트이므로 book() 
즉, 글로벌 스코프에서 book 을 찾아 호출 

[바인딩]
구조적으로 결속된상태로 만드는 것
- 대상: 프로퍼티 이름 
바인딩 목적 
- 스코프 설정, 식별자 해결 
바인딩 시점 구분 
- 정적 바인딩(Lexical, static Binding)
- 동적 바인딩(Dynamic Binding)

정적, 동적 바인딩
정적(렉시컬)바인딩 
- 함수가 호출되었을때 초기화 단계에서 바인딩 
- 함수 선언문 이름을 바인딩
- 표현식(변수,함수) 이름을 바인딩 
JS 는 대부분 정적 바인딩 
동적(다이나믹) 바인딩 
- 실행할 때 바인딩 
- eval()함수 , with 문 

[바인딩 시점의 중요성] 
바인딩 시점이 중요한 이유 
-바인딩 할 떄 스코프가 결정되기 때문
function 오브젝트에서 생성 시점에 스코프 결정 
- 스코프를 functio 오브젝트의 [[scope]] 에 설정
- 스코프가 변경되지 않음 
함수 안의 모든 함수의 스코프가 같음

[실행 콘텍스트 상태 컴포넌트]
실행콘텍스트 상태를 위한 오브젝트
- 실행 콘텍스트 안에 생성 
상태 컴포넌트 유형 
- 렉시컬 환경 컴포넌트(LEC)
Lecical Environment Component
- 변수 환경 컴포넌트(VEC)
Variable Environment Component
this 바인딩 컴포넌트(TBC):
This Binding Component 
=> 함수 안에서 this 로 참조하는 오브젝트 
ex) obj.abc obj를 abc함수 안에서 this 로 참조 
 
실행 콘텍스트(EC){
       렉시컬 환경 컴포넌트(LEC):{ },
       변수 환경 컴포넌트(VEC):{ },
       this 바인딩 컴포넌트(TBC):{ }
}


[렉시컬 환경 컴포넌트]
함수와 변수의 식별자 해결을 위한 환경설정 
함수 초기화 단계에서 해석한 
- 함수와 변수를 {name : value} 형태로 저장 
- 이름으로 함수와 변수를 검색할 수 있게 됨

함수 밖의 함수와 변수 참조 환경 설정 
-함수 밖의 함수와 변수를 사용할 수 있게 됨
=> 함수 안에 있는 것과 밖에 있는 것을 하나의 묶음으로 만들어서 
심플하게 만듬

[렉시컬 환경 컴포넌트 설정]
환경 레코드에 
- 함수 안의 함수와 변수를 기록 
외부 렉시컬 환경 참조에 
-function 오브젝트의 내부 프로퍼티인 [[Scope]] 를 설정 
=> function 키워드를 만나서 function 오브젝트를 만날떄 설정 
즉, 함수가 호출되면 [[Scope]]를 외부 렉시컬 환경 참조에 설정해 두는 것임 

실행 콘텍스트(EC): {
       렉시컬 환경 컴포넌트(LEC):{
              환경 레코드(ER):{
                     point: 100,
                     getName : function(){}
              },
              외부 렉시컬 환경 참조(OLER):{
                     title : "책",
                     getTitle : function(){}
              }
       }
}
렉시컬 환경 컴포넌트의 입장에서 보면 
{환경레코드,외부 렉시컬 환경 참조} 는 하나의 오브젝트에 속함 (덩어리=묶음=컨텍스트)

환경 레코드 안에 기록한 함수와 변수는 묶음 안에서 사용할 수 있고 ,
함수 밖에 스코프를 외부 렉시컬 환경 참조에 설정해놓았고, 이것도 렉시컬 환경 컴포넌트안의
오브젝트에 들어있음 
따라서 함수 안과 밖의 함수와 변수를 하나의 묶음으로 실행 콘텍스트 안에서 사용 가능
=> 엔진 처리가 심플


[외부 렉시컬 환경 참조]
스코프와 실행 중인 함수가 Context 형태이므로 
- 스코프의 변수와 함수를 
- 별도의 처리 없이 즉시 사용할 수 있음

실행 콘텍스트에서  => {환경레코드,외부 렉시컬 환경 참조} 하나의 덩어리에 있기 때문
- 함수 안과 밖에 함수, 변수를 
사용할 수 있으므로 
- 함수와 변수를 찾기 위해 
- 실행 콘텍스트를 벗어 나지 않아도 된다. 

[실행 콘텍스트 실행 과정]
1. getPoint 오브젝트의 [[Scope]] 에 글로벌 오브젝트 설정  => 함수가 있는 곳이 글로벌 오브젝트 이므로 
2. 마지막 줄에서 getPoint() 함수 호출하면 
엔진은 실행 콘텍스트를 생성하고 
실행 콘텍스트 안으로 이동 
- > 준비단계 
4. 컴포넌트를 생성하여 실행 콘텍스트에 첨부
- 렉시컬 환경 컴포넌트 
- 변수 환경 컴포넌트 
- this 바인딩 컴포넌트 
5. 환경 레코드를 생성하여 
렉시컬 환경 컴포넌트에 첨부 
- 나중에 환경레코드에 함수 안의 함수 , 변수를 바인딩 
=> 여기까지 모습 
실행 콘텍스트(EC): {
       렉시컬 환경 컴포넌트(LEC) = { 
              환경 레코드(ER):{}
       },
       변수 환경 컴포넌트(VEC):{},
       this 바인딩 컴포넌트(TBC): {} 
}

6.외부 렉시컬 환경 참조를 생성하여 
렉시컬 환경 컴포넌트에 첨부하고
- function 오브젝트의 [[Scope]] 를 설정 

=> 여기까지 모습 
실행 콘텍스트(EC): {
       렉시컬 환경 컴포넌트(LEC) = { 
              환경 레코드(ER):{},
              외부 렉시컬 환경 참조(OLER):{ =>참조 이기 때문에 외부에서 값 바꿔도 따라 바뀜
                     base : 20 
              }
       },
       변수 환경 컴포넌트(VEC):{},
       this 바인딩 컴포넌트(TBC): {} 
}

7. 호출한 함수의 파라미터 값을 
- 호출된 함수의 파라미터 이름에 매핑 => 70 을 bonus 에 매핑 
- 환경 레코드에 작성 
8. 함수 선언문을 function 오브젝트로 생성
9. 함수 표현식과 변수에 초기값 설정 
10. 여기까지는 외부에 실행 상태를 제공하지 않음 

=> 여기까지 모습 
실행 콘텍스트(EC): {
       렉시컬 환경 컴포넌트(LEC) = { 
              환경 레코드(ER):{
                     bonus : 70,
                     point : undefined 
              },
              외부 렉시컬 환경 참조(OLER):{ =>참조 이기 때문에 외부에서 값 바꿔도 따라 바뀜
                     base : 200,
              }
       },
       변수 환경 컴포넌트(VEC):{},
       this 바인딩 컴포넌트(TBC): {} 
}

var base = 200;
function getPoint(bonus){
       var point = 100;
       return point + base + bonus;
};
console.log(getPoint(70)) 


book  

11. 함수 안의 코드를 실행 

[환경 레코드 구성] 

환경 레코드를 구분하는 이유 
- 기록 대상에 따라 다르기 때문 

선언적 환경 레코드 
- DER : Declarative Environment Record
- function, 변수 , catch 문에서 사용 
- 앞 절에서 환경 레코드에 설정한다고 했는데 설명을 위한 것이므로, 실제로 여기에 설정 

오브젝트 환경 레코드 
- OER : Object Environment Record
- 글로벌 함수와 변수, with 문에서 사용
- 정적이 아니라 동적이기 떄문 


[this 바인딩 컴포넌트] 
목적 
- this 로 ,함수를 호출한 오브젝트의 프로퍼티에 악세스 
ex) this.propertyName
악세스 메커니즘 
- obj.book() 형태에서 
- this 로 obj 를 참조할 수 있도록  
=> obj 는 현재 실행중인 함수의 소유가 아님. 즉, 함수 안에 작성된 코드가 아님 
따라서 함수가 실행되는 도중에 obj 의 프로퍼티가 삭제되거나 값이 변경될 수 있음 
동적으로 this 로 참조할 수 있는 오브젝트 자체만 묶어 놓는거임 
사용하는 시점에 최종적으로 바인딩 된 값 사용 가능 

- this 바인딩 컴포넌트에 obj 참조를 설정 
obj 의 프로퍼티가 변경되면 동적으로 참조 
- 설정이 아닌 참조이기 때문 


var obj = {point:100};
obj.getPoint = function(){
    return this.point;
};
console.log(obj.getPoint());

1.마지막 줄에서 obj.getPoint() 함수 호출 
2. 실행 콘텍스트 생성 
3. 3개의 컴포넌트 생성 
- 렉시컬/변수 환경 컴포넌트, this 바인딩 컴포넌트
4. this 바인딩 컴포넌트에 
- getPoint() 에서 this 로 obj의 프로퍼티를 사용할 수 있도록 바인딩
= > 함수를 실행하는 시점에서 묶어놓음 

실행 콘텍스트(EC): {
       렉시컬 환경 컴포넌트(LEC) = { 
              환경 레코드(ER):{
              },
              외부 렉시컬 환경 참조(OLER):{ =>참조 이기 때문에 외부에서 값 바꿔도 따라 바뀜
                     base : 200,
              }
       },
       변수 환경 컴포넌트(VEC):{},
       this 바인딩 컴포넌트(TBC): {
              point : 100, 
              getPoint : function(){}
       } 
}

=> obj.getPoint() 에서 obj 의 프로퍼티가 this 바인딩 컴포넌트에 
바인딩 되도록 의도적으로 설계 코딩해야 한다. 

실행 콘텍스트가 메모리에 올라가서 단독으로 실행하면 빨리 끝남 
=> 어떻게 만들어야 좋을까 고민 

함수 호출 

함수가 호출되면 3개의 파라미터 값을 실행 콘텍스트로 넘겨줌 
- 함수가 호출한 오브젝트
-함수 코드 
-호출한 함수의 파라미터 값 

함수를 호출한 오브젝트를 
- this 바인딩 컴포넌트에 설정하여 this로 참조 

함수 코드 
- function 오브젝트의 [[Code]] 설적되어 있음

호출한 함수의 파라미터 값 ( 쉽게말해 넘겨준 값임 ) 
- 호출된 함수의 Argument 오브젝트에 설정 


[파라미터 이름에 값 매핑 방법] 
var obj = {};
obj.getTotal = function(one,two){
       return one + two; 
}
log(obj.getTotal(11,22,77)); 

1. 실행 콘텍스트로 넘겨준 파라미터 값을 
- param 이라고 함 
2. getTotal 오브젝트의 [[FormalParameters]] 에서
- 호출된 함수의 파라미터 이름을 구합니다.
- 설명 편의를 위해 name 이라 함 
- name 은 ['one','two'] 형태.
- [[FormalParameters]] 는 function 오브젝트를 생성할 때 설정 

3. name 배열을 하나씩 읽음 
4. param 에서 index 번쨰의 값을 구합니다. 
- 인덱스의 값이 없으면 undefined 반환 
5. name의 파라미터 이름과 4 번에서 구한 값을 
- 선언적 환경 레코드에 
- {one:11, two:22 } 형태로 설정합니다. 
- 같은 이름이 있으면 값이 대체됩니다. 
6. name 을 전부 읽을 때까지 3번에서 5번까지 반복 

77 은 매핑될 대상이 없어서 불가 
함수 안에 작성된 아규먼트 오브젝트에는 들어감 


 - 파라미터 값 할당 기준 정리하기 ! 
파라미터에 있는건 함수 안에서 var 안해도 바로 변경 가능 


[function 인스턴스 생성]

function Book(point){
       this.point = point;  ==> 이때 this 는 생성한 인스턴스를 참조 (인스턴스 마다)
};
Book.prototype.getPoint = function(){
       return this.point + 200;
};
var obj = new Book(100);
console.log(obj.poing);
console.log(obj.getPoint());
1. function Book(point){...}
- Book 오브젝트를 생성 
- Book.prototype 이 만들어짐
2. Book.prototype.getPoint = function(){}
- Book.prototype 에 getPoint 를 연결하고 
  function(){} 을 할당 
- Book.prototype 이 오브젝트이므로, 프로퍼티를 연결할 수 있음.

3. var obj = new Book(100);
- Book() 을 실행하며 인스턴스를 생성하고 
  생성한 인스턴스에 point 값을 설정 

- Book.prototype 에 연결된 프로퍼티를 
  생성한 인스턴스에 할당 

4. console.log(obj.point);
- obj 인스턴스에서 프로퍼티 이름으로 값을 구해 출력 
5. console.log(obj.getPoint());
- obj 인스턴스의 메소드 호출

6. return this.point + 200; dptj 
- this 가 obj 인스턴스를 참조 
7. 강좌의 함수/ 메소드 사용 기준 
- Book(): 함수 
- getPoint(): 메소드, prototype 에 연결 

프로토타입에 연결되어 있으면 메소드 
프로토 타입에 연결되어 있지 않으면 함수 

[생성자 함수]
new 연산자와 함께 인스턴스를 생성하는 함수 
- new Book() 에서 Book() 이 생성자 함수 
new 연산자 
- 인스턴스 생성을 제어 
- 생성자 함수 호출 
생성자 함수 
- 인스턴스 생성, 반환 
- 인스턴스에 초깃값 설정

코딩 관례로 생성자 함수의 첫 문자는 대문자
- new Number() , new Array() , new Book() 

[생성자 함수 실행 과정]
function Book(point){
       this.point = point;
};
Book.prototype.getPoint = function(){
       return this.point;
};
var obj = new Book(10);



1. 엔진이 new 연산자를 만나면 
- function 의 [[Construct]] 를 호출하면서 
파라미터 값으로 10 을 넘겨줌.

 
2.  [[Construct]]는 function 오브젝트를 생성할 때 
- Book() 함수 전체를 참조하도록 설정 
- [[Construct]] 를 호출하는 것은 new Book 으로 function Book(..) 을 호출하는 
- 것과 같다. 
- 다만 function Book 은 Book 스코프만 처리 
- [[Construct]] 는 Book 전체 (프로토타입 연결된것까지 ) 처리. 

3. [[Construct]] 인스턴스를 생성하여 반환함. 
4. 반환한 인스턴스의 new 연산자가 받아 
- new 연산자를 호출한 곳으로 반환 => obj 에 할당 
5. new 라는 뉘양스로 인해 
- new 라는 연산자가 인스턴스를 생성하는 것으로 생각할 수 있지만 
- function 오브젝트의 [[Construct]] 가 인스턴스를 생성 
- 그래서 Book() 이 생성자 함수 => 인스턴스 생성자 함수 

function Book(point){
       this.point = point;
};
Book.prototype.getPoint = function(){
       return this.point;
};
var bookObj = new Book(10);

1. new Book(10) 실행 
- Book 오브젝트의 [[Construct]] 호출 
- 파라미터 값을 [[Construct]] 로 넘겨줍니다. 

2. 빈 Object를 생성합니다. 
- 이것이 인스턴스 
- 지금부터 빈 오브젝트 {} 이며 이제부터 하나씩 채워감.

3. 오브젝트에 내부 처리용 프로퍼티를 설정 
- 공통 프로퍼티와 선택적 프로퍼티

4. 오브젝트의 [[Class]] 에 "Object" 설정
- 따라서 생성한 인스턴스 타입은 Object 

5. Book.prototype 에 연결된 프로퍼티(메소드) 를 
- 생성한 인스턴스의 [[Prototype]] 에 설정 
- constructor 도 같이 설정됨.

Book 인스턴스 : {
       point : 10 , 
       __proto__ = {
              constructor : Book, => 같이 설정됨  Book 전체를 참조
              getPoint : function(){},
              __proto__ : Object => 빌트인 Object 오브젝트의 프로토 타입에 있는 6개 메소드 첨부
       }
}



var Book = function(){};
var result = Book === Book.prototype.constructor;
console.log("1:",result)
var obj = new Book();
console.log("2:",Book === obj.constructor);
console.log("3:",typeof Book);
console.log("4:",typeof obj);

1. Book === Book.prototype.constructor 
true 가 출력된것은 타입까지 같다는 의미 
Book 오브젝트를 생성할 때 
Book.prototype.constructor 가 
Book 오브젝트를 참조하기 때문

2. Book === obj.constroctor;
- obj의 constructor 가 
  Book 오브젝트를 참조하므로 
- [실행결과] 2 번에 true 가 출력

3. typeof Book;
- Book 오브젝트 타입은 function 
4. typeof obj; 
- obj 인스턴스 타입은 object

5. function 오브젝트를 인스턴스로 생성했더니 
- function 에서 object 로 타입이 변경되었음 
- 내부 프로퍼티인 [[Construct]] 가 실행될 때 
  생성한 오브젝트의 [[Class]] 에
  "Object" 를 설정하기 때문

6. 오브젝트 타입이 바뀐다는 것은 
- 오브젝트 성격과 목적이 바뀐 것을 뜻함.
- 다른 관점에서 접근해야 함. => 일반 함수처럼 X 
isinstance로 접근해야 
function 은 함수가 1개 , 인스턴스는 함수가 여러개 


[prototype 오브젝트 목적]
prototype 확장 
- prototype 에 프로퍼티를 연결하여 prototype 확장 
- Book.prototype.getPoiint = function(){}

프로퍼티 공유 
- 생성한 인스턴스에서 원본 prototype 의 프로퍼티 공유 
- var obj  = new Book(123);
- obj.getPoint(); 
=> 인스턴스에 있는 getPoint를 호출하는 것이 아니라 , 
Book.prototype 의 getPoint를 호출하는 것 ( 공유하는것임: 경로를 만드는것 )

인스턴스 상속 Inheritance 
- function 인스턴스를 연결하여 상속 
- Point.prototype = new Book();

[인스턴스 상속]
인스턴스 상속 방법
- prototype 에 연결된 프로퍼티로 
  인스턴스를 생성하여 상속받을 prototype 에 연결
- 그래서, protype-based 상속 이라고도 합니다. (다른 언어는 클래스상속)

JS 에서 prototype 상속보다 
- 프로퍼티 연결이 의미가 더 큽니다. 
- 인스턴스 연결도 프로퍼티 연결의 하나 

ES5 상속은 OOP의 상속 기능 부족 
- ES6 의 Class 로 상속 사용 (완전히 protype-based 상속을 벗어난 것은 아니다.) 

function Book(title){
       this.title = title;
};
Book.prototype.getTitle = function(){
       return this.title;
};
function Point(title){
       Book.call(this,title);
};
Point.prototype = Object.create(Book.prototype,{});
var obj = new Point("자바스크립트");
console.log(obj.getTitle());


[prototype 확장 밥법]
prototype 에 프로퍼티를 연결하여 작성 
- prototype.name = value 형태  
name에 프로퍼티 이름 작성 

value 에 Js 데이터 타입 작성 
- 일반적으로 function 을 사용 => 숫자를 작성할 수도 있음

prototype 에 null 을 설정하면 더 이상 확장 불가 

[프로토 타입 연결 고려사항]
prototype 에 연결할 프로퍼티가 많을 때 
- Book.prototype.name1,2,3~ N 형태는
- Book.prototype 을 반복해서 작성해야 하므로 번거롭다. 
- Book.prototype = {name1:value, ....} 형태로 작성 => 한꺼번에 작성 
- 이렇게 한꺼번에 연결하면 constructor 가지워진다. 

constructor 가 지워지는 문제와 대책 
- {name1: value,...} 형태로 설정한 후 
- prototype 에 constructor 를 다시 연결 


1.오브젝트 리터럴{} 을 사용하여 
- 프로퍼티를 연결할 때에는 
- constructor 가 지워지는 것을 고려해야 함. 

2. constructor 가 없어도 인스턴스가 생성되지만 
- constructor 가 연결된 것이 정상이므로 
- 코드처럼 constructor 에 Book function 을 할당 

function Book(){};
Book.prototype = {
       constructor : Book,
       setPoint : function(){}
};
var obj = new Book();
console.log(obj.constructor)


[this로 인스턴스 참조]
this 로 메소드를 호출한 인스턴스 참조 
- var obj = new Book();
- obj.get() 형태에서 this 로 obj 참조 

인스턴스에서 메소드 호출 방법 
- prototype 에 연결된 프로퍼티가 
  __proto__ 에 설정되며 
- 인스턴스 프로퍼티가 됨
- this.prototype.setPoint() 형태가 아닌 
  this.setPoint() 형태로 호출  => 인스턴스에서 호출하면 prototype 안써도 됌. 


function Book(){
       console.log("1:", this.point);
};
Book.prototype.getPoint = function(){
       this.setPoint();
       console.log("2:",this.point);
};
Book.prototype.setPoint = function(){
       this.point = 100;
};
var obj = new Book();
obj.getPoint();


new 연산자 함수로 생성자 함수 Book() 을 호출하게 되면 
인스턴스를 만들고, 생성자 함수로 이동 

이때, this.point 로 출력을 하게 되는데, 
this 는 인스턴스를 참조하게 됨
- 생성하는 인스턴트에 point 프로퍼티가 없더라도 
에러가 나지 않고 undefined 를 반환 => 함수는 에러남 인스턴스라 가능한것

obj.getPoint();
this 가 메소드를 호출한 인스턴스 참조 
즉, 메소드 앞에 작성한 인스턴스 참조

this.setPoint();
- this 가 인스턴스 참조하여 
- 인스턴스에 있는 setPoint() 호출 



[prototype 메소드 직접 호출] 

Book.prototype.getPoint();
- 인스턴스를 생성하지 않고 직접 메소드 호출 

Book.prototype 을 
- getPoint() 에서 this로 참조 

obj 인스턴스에는 point 가 있지만 
- Book.prototype 에 point 가 없으므로 
  undefined 를 반환 

- 인스턴스를 생성하여 메소드를 호출하는 것과 
  직접 prototype 을 직성하여 호출하는 것의 차이 


[프로퍼티 공유 시점]
사용하는 시점에 prototype 의 프로퍼티를 공유 
prototype 의 프로퍼티로 인스턴스를 생성하지만, 
- 인스턴스의 프로퍼티는 원본 prototype 의 프로퍼티를 참조 
- 복사하여 인스턴스에 갖고 있는 개념이 아님 => path 만 가지고 있음(경로)

인스턴스의 메소드를 호출하면 
- 원본 prototype 의 메소드를 호출 

원본 prototype에 메소드를 추가하면 
- 생성된 모든 인스턴스에 추가한 메소드 사용 가능 
- 원본 prototype 의 메소드를 호출하기 때문 

[프로퍼티 공유 시점]
function Book(){
       this.point = 100;
};
var obj = new Book();
console.log(obj.getPoint);

Book.prototype.getPoint = function(){ 
       return this.point;
};
var result = obj.getPoint();
console.log(result); 

1. var obj = new Book(); 
- 인스턴스를 생성하여 obj 에 할당 

2. console.log(obj.getPoint);
- obj 인스턴스에 getPoint() 가 없음 => undefinded

3. Book.prototype 에 getPoint() 추가 
- 앞에서 생성한 obj 인스턴스에서 getPoint() 를 사용할 수 있음.

4. var result = obj.getPoint();
- 인스턴스를 생성할 때는 ojb 에 getPoint 가 없었지만, 
- getPoint() 를 호출하기 전에 Book.prototype 에 getPoint를 추가했으므로 호출 가능 

5.return this.point;
- 추가하더라도 this 가 인스턴스를 참조

6.이런 특징을 활용하여 
- 상황(필요) 에 따라  조건을 붙이고 메소드를 추가 
- 역동적인 프로그램 개발 가능 


-- > ! 인스턴스 프로퍼티, 우선사용 정리하기 
