[Promise]  
- 자바스크립트는 기본적으로 동기로 실행
실행이 끝나야 다음 코드를 실행

- Promise 는 비동기로 처리(실행) 
코드를 연속으로 처리 (실행) 하지 않고 
중간에 흐름이 끊어졌다가 -> 연결된 코드를 처리할 수 있는 환경이 되었을 때 -> 실행 
- DOM 스펙에서 JavaScript 스펙으로 전환 

[Promise 처리 흐름] 
- new Promise() 를 실행 
파라미터 함수를 실행
resolve() 를 호출하지 않음 //흐름이 끊어짐
log("promise") 실행
obj 변수에 Promise 인스턴스 할당

- obj.then() 을 실행하지 않는다 
- 마지막 줄로 내려가 log("마지막") 을 실행
- resolve() 실행한다  //흐름이 연결
then() 의 첫 번째 파라미터 함수 실행
log("성공") 실행


resolve 를 호출하게 되면 then 의 첫 번쨰 파라미터의 함수가 실행 
reject 를 호출하게 되면 then 의 두번째 파라미터 함수가 실행

[Promise 상태]
- 상태는 세 가지이며, 하나만 발생함.
pending , settled(fulfilled,reject)
 
1. new Promise() 로 인스턴스 생성
2. resolve 와 reject 이름의 Function 오브젝트를 생성하여 인스턴스에 설정
3. resolve("성공" ); reject("실패"); 
실행자 처리를 성공하면 resolve() 가 호출되고, 실패하면 reject() 가 호출됨
4. 지금 호출하지 않고 코드 끝까지 실행한 후 호출  =>  Promise 의 비동기 처리(실행)
5. obj.then((value)=> { },(reason)={}) 을 실행하지 않고 아래로 내려감
6. log("끝") 실행  => 여기서 전체 흐름이 끝나지만, 실행자의 resolve() , reject() 실행이 남아있음
7. 실행자에서 resolve("성공") 또는 reject("실패") 를 호출. 
상태가 하나만 발생하므로 상태에 해당하는 함수만 호출 (여기서는 성공)
8.then() 을 호출. then() 단위로 파라미터의 함수를 실행하게 됨.
9. then((value)=>{})  실행자에서 resolve("성공") 를 호출하면 then() 의 첫 번째 파라미터 함수가 실행되며,
resolve("성공") 에서 "성공" 이 value 로 설정됨.
10. 엔진에서는 상태(fulfilled,rejected) 에 따라 파라미터의 핸들러 함수를 실행한다.

[Promise 인스턴스 생성]
파라미터 function(resolve,reject){...}
Promise 인스턴스를 생성하여 반환
파라미터에 실행자 executer 함수를 작성 
- 성공,실패 처리 함수 이름
- 실행자 코드 

[then()]

- 성공과 실패 핸들러 함수를 작성
promise 인스턴스를 반환

-파라미터
첫 번쨰 : 성공일때 실행될 핸들러 함수
두 번째 : 실패일 때 실행될 핸들러 함수 
obj.then((value)=> {log(value),(reason)=>{log(reason)}}) 


- 실행자의 resolve(), reject() 에 
파라미터 값을 다수 작성하더라도 핸들러 함수는 처음 하나만 사용한다. 
resolve(1,2,3,4) 와 같이 작성하고 
then((value)=>{console.log(value)}) 로 하면 1만 출력됨.
다수의 파라미터 값을 넘겨주려면 배열, Object 등을 사용해야 한다.

[then() 의 return]
- then() 에서 Promise 인스턴스를 반환한다.
return 값을 반환하지 않는다.
method chain 에서 this 를 return 하는 것과 같은 개념이다. 
따라서 then().then() 형태처럼 then() 을 연속해서 호출할 수 있다.

- return 값을 [[PromiseValue]] 에 설정하고 (인스턴스를 반환하니까, return 값은 반환하지 않고 설정하는 것)
[[PromiseValue]] 값을 다음 then() 의 파라미터 값으로 넘겨 준다.

[catch]
reject, 실패 처리 핸들러 함수
반환 Promise 인스턴스
- 실패 (reject) 의 핸들러 함수를 작성
then() 의 두 번쨰 파라미터를 작성하지 않고 
  
대신에 catch(param) 을 작성
return 문의 표현식 평과 결과를 [[PromiseValue]] 에 설정

- Promise 인스턴스를 반환하므로 
catch().then() 처럼
이어서 then() 을 호출할 수 있다.
[[PromiseValue]] 값을 then() 의 파라미터 값으로 넘겨줌

const check =false;
conset obj = new Promise((resolve,reject)=>{
    check ? resolve(check) : reject(1,2,3);    //첫 번째 값인 1만 넘겨줌 
})
obj.then((check) => {console.log(value)})
.catch((value)=>{ console.log(value)}) 

[resolve()]
resolve(["회원1","회원2"])  여러 값 넘기려면, 리스트나 오브젝트 사용

[all()] 
파라미터 : Iterable
반환 : Promise 인스턴스

- 파라미터의 모든 Promise 처리를 완료했을 때 
then() 의 핸들러 함수를 실행
promise.all() 형태로 작성

- 파라미터를 이터러블로 작성
작성한 순서로 Promise 인스턴스 생성

- 실행자에서 실패가 발생했을 때
reject() 가 발생한 시점에 then() 을 실행

function order(delay){
    return new Promise( (resolve)=> {
        setTimeout(()=>{
            console.log("실행자:",delay);
            resolve(delay);
        },delay);
    });
};
Promise.all([order(500),order(300), order(100)])
.then((param)=> console.log("then:"+param));

결과 : 
실행자 : 100
실행자 : 300
실행자 : 500
then : 500,300,100 

1. 파라미터에작성한 순서로 order() 함수를 호출하며 Promise 인스턴스를 생성하여 반환함.
2. setTimeout(()=>{...}, delay)  지연 시간이 짧은 순서인 100,300,500 순서로 resolve(delay)
를 실행하지만, 실행할 때마다 아래의 then() 을 호출하지 않고 ,3개를 모두 실행한 후에 then() 을 한 번만 호출함.

3. then((param)=> console.log("then:" + param)); 실행 결과의 "then" 처럼 resolve(delay)의 
파라미터 값을 배열로 만들어 param 파라미터에 설정
4. 이때 resolve(delay) 가 실행된 순서가 아니라 all() 의 파라미터에 작성한 순서로 값을 설정
5. resolve() 실행 순서는 100,300,500 이지만, [실행 결과] 에 [500,300,100] 이 출력 


[Promise 메커니즘 분석] 
- new Promise(function(){}) 형태

new Promise((resolve,reject)=> { 
    resolve("성공");
})
new Promise(function(resolve,reject){
    resolve("성공");
})

new 연산자로 Promise를 호출하면, prototype.constructor를 호출하며 인스턴스를 만듬
일반적으로 new Point(one,two) 처럼 인스턴스의 초깃값을 파라미터에 작성하지만
비동기 처리를 위한 환경을 만들기 위해 파라미터에 함수를 사용한것.

- 실행자의 파라미터에 함수 이름 작성

실행자 
(resolve,reject)=> { 
    resolve("성공");
    reject("실패");
}
에 작성한 파라미터인 resolve,reject 는 함수 이름임. 
파라미터에 이름이 없는 함수를 호출하면 ex) abc() 에러가 발생하지 않지만, 
then() 의 핸들러 함수가 실행되지 않음.

- 파라미터 "위치" 로 성공/ 실패 함수 처리
new Promise((one,two)=>{
    two();
}).then((value)=>{console.log("성공"),(reason)=>{console.log("실패")})

two() 를 호출하면, then() 의 두 번째 파라미터 함수가호출
두 번째 파라미터는 실패를 나타내는 함수. 
즉, 엔진은 호출된 파라미터 위치의 함수로 성공/실패를 처리함.

임의의 함수 이름을 사용할 수 있음
resolve() ,reject() 를 사용한 것은 일반적인 시맨틱이기 떄문

호출된 파라미터의 함수에 따라 비동기 처리를 위한 
즉, then() 에서 사용하기 위한 fulfilled 또는 reject 를 
Promise 인스턴스의 [[PromiseStatus]] 에 설정


- 실행자에 resolve() , reject() 순서로 작성
new Promise((resolve,reject)=>{
    resolve("성공");
    reject("실패");
}).then((value)=>{console.log(value)},(reason)=>{console.log(reason)});

결과 : 성공 

new Promise((resolve,reject)=>{
    reject("실패");
      resolve("성공");
}).then((value)=>{console.log(value)},(reason)=>{console.log(reason)});

결과 : 실패 

성공/실패 중 하나만 발생. 
reject() 함수, resolve() 함수 순서로 작성하면
[[PromiseStatus]] 가 rejected 가 됨.


resolve() 함수, reject() 함수 순서로 작성하면
[[PromiseStatus]] 가 fulfilled 가 됨.

먼저 호출한 함수의 상태를 [[PromiseStatus]] 에 설정 

- then 의 핸들러 함수에 사용할 값을 인스턴스에 저장  
new Promise((resolve,reject)=>{
    resolve("성공")
}).then((value)=>{console.log(value)});
console.log("끝")

resolve 의 파라미터 값 "성공" 을 Promise 인스턴스의 [[PromiseValue]] 에 저장
then 이 비동기로 처리되므로 then() 에서 값을 사용하기 위한 것입니다.

[[PromiseStatus]] 에 값을 설정하는 것도 같은 접근임

- Promise 인스턴스 반환

new Promise((resolve)=>{
    resolve(100);
}).then((value)=> {
    console.log(value);
    return 200; //동기
}).then((value)=> {
    console.log(value);
});

결과 : 
100
200


then(),catch() 에서 Promise 인스턴스를 생성하여 반환
처음의 then() 은 비동기로 실행되지만, 이어지는 처리는 동기/비동기로 실행할 수 있음

실행중인 then() 에서 비동기 처리를 하지 않으면 이어지는 then()/catch()는
동기형태로 처리하게 됩니다.
=> 바로 연결해서 호출하는 개념이니까 동기 개념 

실행중인 then() 에서 다시 비동기로 처리하면, 이어지는 then()/catch() 는 비동기로 처리
ex) return 200  을 하지 않고 new Promise 로 인스턴스를 만들어서 처리하면 비동기

Promise 인스턴스를 생성하여 반환하고 이어지는 처리를 then 에서 받으므로 동기/비동기로 처리할 수 있음 

[async/await]
- 비동기 환경에서 실행하지만 실행이 끝나야 다음을 실행
실행은 비동기이고, 실행 순서는 동기

- async 는 키워드가 아니며
"async function" 이 키워드 개념이며 async 함수라고 부릅니다.
- await 는 키워드 

function create(param){
    return new Promise((resolve)=> {
        resolve(param);
    });
};
async function getPoint(option){
    const value = await create(create);
    console.log(value);
};
getPoint({point:100}) 


create() 함수 : Promise 인스턴스를 return 
=> 비동기 처리 => resolve(param) 이 실행되기 전에 아래 코드를 실행
=> 그런데 await 는 아래로 내려가서 console.log 를 실행하지 않고 resolve() 가 끝나는 것을 기다림
=> resolve(param) 가 실행되면, param 값을 받아 create() 로 보내며, 이 값을 받아 value 변수로 할당
=> console.log(value); 실행 

기다리다가(동기) resolve 가 실행되면 param 값을 create 에 보내줌 그러면 그 값을 받아서 value 에 할당하고
내려와서 console.log(value) 실행

결과 : 
{point:100} 

[async 함수]
- 비동기 함수를 뜻하며 
AsyncFunction 오브젝트를 생성하여 반환

acync function member(){
    return "회원1";
};
console.log(Object.prototype.toString.call(member));

엔진이 async 함수를 만나면 AsyncFunction 오브젝트로 생성
Object.prototype.toString.call 
toString() 을 call 하면 Symbol.toStringTag() 가 실행되며
오브젝트를 설명하는 디폴트 문자열을 반환
[object AsyncFunction] 이 출력
즉, sports는 AsyncFunction 오브젝트
AsyncFunction 오브젝트는 자체에 Symbol.toStringTag 만 있으며 
빌트인 Function 오브젝트를 상속받음
따라서 호출 가능


- async 함수가 호출되면 
Promise 인스턴스를 반환

async function sports(){
    return "축구";
};
const obj= sports();
console.log(obj instanseof Promise);

결과 : true 
=> Promise 인스턴스를 의미. 비동기 환경에서 실행 

- async 함수의 return 값을 처리하려면 
then() 을 함수 호출에 연결하여 작성

acync function member(){
    return "회원1";
};
member().then(response)=>{console.log(response)});
console.log("여기 먼저") 

member() 을 호출하면, Promise 인스턴스를 반환하므로, then() 을 연결하여 사용 가능.
then() 을 실행하지 않고, console.log("여기 먼저") 를 먼저 실행

resolve() 를 작성하지 않았지만, return 문의 표현식 평가 결과를 resolve() 의 파라미터 값으로
사용하여, then() 의 첫 번째 파라미터 함수의 response 에 파라미터에 설정

결과 : 
여기 먼저
회원1

- async 함수에서 throw 가 발생하면
rehject() 로 처리

async function sports(){
    throw "에러" ;
};
sports().then(()=>0 ,(rej)=> console.log(rej))

async 함수에서 throw 가 발생하면, reject() 로 처리되며, 
표현식의 평가 결과를 파라미터 값(rej) 으로 사용

결과 : "에러"

[await]
- Syntax
[value] = await표현식 형태
async 함수 안에 작성
[value]는 선택

- 표현식이 promise 오브젝트이면 
resolve() 의 파라미터 값을 반환 (Promise 를 반환하는게 아님)

function create(param){
    return new Promise((resolve,reject)=>{  //reject 안적어도 됌 
        resolve(param);
    });
};
async function getPoint(option){
    const value = await create(option);
    console.log(value);
};
getPoint({point:100});

결과 : {point:100} 


- 표현식이 Promise 오브젝트가 아니면 (create 가 Promise 아니면)
표현식의 평가 결과를 반환 

async function getPoint(option){
    const value = await option.point + 200;
    console.log(value);
};
getPoint({point:100});

그런데 굳이 async await 로 사용할 의미가 없음. 
await 가 비동기 환경에서 동기 처리를 위한 것이므로.


- Promise 에서 reject() 가 발생했을 떄 
에러에 대처하는 형태

- try-catch 를 사용한 형태
에러 대응

function create(param){
    return new Promise((resolve,reject)=>{
        reject(param);
    });
};
async function getPoint(option){
    try{
        await create(option);
    }catch(error){
        console.log(error);
    };
};
getPoint({point:100});

Promise 에서 reject() 가 실행되면 catch(error) 블록에서 받음 
reject(param) 의 param 이 catch(error) 의 error 에 설정


- catch() 를 사용한 형태

function create(param){
    return new Promise((resolve,reject)=>{
        reject(param);
    });
};
async function getPoint(option){
    await create(option).catch((value)=>{
        return 300;
    }).then((param) => {
        console.log(param);
    });  
};
getPoint({point:100});

catch() 에서 return 300 이  [[PromiseValue]] 에 저장되고 
이를 then 의 param 으로 사용 

결과값 :
300

- Promise 가 아닌 값을 반환함.

function create(param){
    return new Promise((resolve,reject)=>{
        reject(param);
    });
};
async function getPoint(option){
    const value = await create(option).catch((value)=>{
        return 300;
    });
    console.log(value)
};
getPoint({point:100});

[for-await-of]
- Syntax
for await (variable of iterable){...}
async 함수에서 사용할 수 있음.

동기 반복에 사용할 수 있지만

const list = [10,20,30];
async function show(){
    for await (const value of list){
        console.log(value)
    };
};
show();

variable 에 const/let/var 변수를 작성
[10,20] 의 엘리먼트를 하나씩 반복하면서 값을 value 에 설정하고
console.log(value) 로 값을 출력
배열에서 Promise 인스턴스를 반환하지 않으므로, 비동기 반복이 아니라 동기 반복이다.




Ajax 모델
- <form>전송 버튼 클릭 등의 UI 가 발생하면 
자바스크립트가 버튼 클릭을 인식하여 에러 체크 등의 전처리를 수행 
form 을 서버로 전송하거나 (전체) form 에서 데이터를 추출하여 데이터만 서버로 전송(부분)
- 서버 처리
데이터를 데이터 베이스에 저장하는 등의 처리 
처리 결과를 데이터(데이터,값)를 브라우저로 정송
- 브라우저 처리
서버에서 전송한 데이터를 받아
HTML,CSS,DOM,JavaScript로 콘텐츠 표현 

- MVC 패턴
Model , View , Control

- Model
모델이란 비즈니스 로직 (ex 유저 아이디는 반드시 입력해야 한다.)
일반적으로 서버에서 처리하지만 
클라이언트에서도 처리(보안 고려해야함) 

- View
콘텐츠를 표현하는 부분, 사용자 인터페이스

- Control
Model 과 View 제어
서버와 클라이언트에서 실행



classic(동기) 모델 
- 브라우저와 서버가 연결된 상태 
- 브라우저 -> 서버 -> 브라우저 사이의 모든 처리가 끝나야 연결이 해제되며, 다음 처리를 할 수 있음
- 사용자가 끝날 때까지 기다려야 한다.

Ajax (asynchronous) 모델 
- 브라우저에서 서버로 전송한 후 연결을 끊음
- 연결된 상태가 아니므로 브라우저에서 다른 처리가 가능
- 서버에서 처리상태(4 단계) 가 발생할 때마다 상태를 브라우저로 전송 
처리상태 4단게
1. Ajax 엔진에 서버로 보낼 데이터 추출하여 전동
2. 서버로 데이터 보내줌 
3. 서버에서 응답이 올 때까지 기다리지 않고 통신 끊어버림 (서버가 상태를 알려줌)
4. Ajax 엔진에 서버에서 데이터 보내고, Ajax엔진은 받은 데이터를 받아서 처리 
연결했다가 보내주고 다시 끊음
- 전송하면 브라우저 이벤트가 발생하며 xhr 오브젝트르 통해 자바스크립트로 처리 상태를 받아 상태를 체크

 브라우저에서 UI 가 발생하면 자바스크립트로 그것을 캐치해서 서버로 보낼 데이터를 추출하여 AJax 엔진으로 전송
 xhr 오브젝트가 서버와 통신하게 됌.
서버로 데이터를 보내주게 됌.
서버에서 응답이 올 때까지 기다리지 않고 통신을 끊어버림 서버가 상태를 알려주는 것.
xhr 오브젝트를 자바스크립트로 컨트롤하여 상태를 체크
자바스크립트가 데이터를 받아서 처리   

[XMLHttpTequest] 
- XMR을 약칭으로 사용
- Object 로 Resource를 fetch 하기 위한 API
- SOP(same origin policy) 제약을 받음
source(protocol,port,host) 가 같은 URL 에만 접근 가능

CORS(Cross-Origin Resource Sharing) 는 가능

[XMLHttpRequest 플로우]
- 브라우저 Request
XMLHTTPRequest 인스턴스 생성 
이벤트 핸들러 작성 ex) obj.onreadystatechange (이벤트) = (이벤트 핸들러)
서버와 연결 (전송방법,URL,동기/비동기 통신 지정)
데이터 전송
- 서버
상태가 바뀔 때마다 상태를 브라우저로 전송
마지막 상태에서 데이터 전송

- 브라우저 Response 
서버에서 상태를 전송할 대마다 이벤트 발생 (onreadystatechange 이벤트)
핸들러에서 상태에 따른 처리

const obj = new XMLHttpRequest();
obj.onreadystatechange = () => {
    console.log(obj.readyState);
    if(obj.readyState === 4 && obj.status === 200){
        console.log(obj.response);
    };
};
obj.open("GET",'../file/data.txt",true); //open 메소드는 서버와 연결 1번째파라미터 :전송방법  2번쨰 파라미터: URL , true 는 비동기 통신을 뜻함 true 가 default false 를 작성하면 동기 통신이 된다.
obj.send(); //파라미터에 작성한 data 를 서버로 전송








