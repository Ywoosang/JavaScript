[XMLHttpTequest] 
- XMR을 약칭으로 사용
- Object 로 Resource를 fetch 하기 위한 API
- SOP(same origin policy) 제약을 받음
source(protocol,port,host) 가 같은 URL 에만 접근 가능

CORS(Cross-Origin Resource Sharing) 는 가능

[XMLHttpRequest 플로우]
- 브라우저 Request
XMLHTTPRequest 인스턴스 생성 
이벤트 핸들러 작성 ex) obj.onreadystatechange (이벤트) = (이벤트 핸들러)
서버와 연결 (전송방법,URL,동기/비동기 통신 지정)
데이터 전송
- 서버
상태가 바뀔 때마다 상태를 브라우저로 전송
마지막 상태에서 데이터 전송

- 브라우저 Response 
서버에서 상태를 전송할 대마다 이벤트 발생 (onreadystatechange 이벤트)
핸들러에서 상태에 따른 처리

[ XMLHttpRequest 이벤트 ]

[onreadystatechange]

readyState              값           내용
UNSENT                  0       XHR 인스턴스 생성
OPENED                  1       open() 성공
HEADERS_RECEIVED        2       send() 실행 Header 와 status 를 받은 상태
LOADING                 3       다운로드 중인 상태
DONE                    4       통신을 완료한 상태

- 상태를 나타내는 readyState 값이 바뀔 때 마
onreadystatechange 이벤트가 발생하며, 핸들러 함수가 실행
- 동기 통신에서는 사용할 수 없음

const obj = new XMLHttpRequest();
obj.onreadystatechange = () => {
    console.log(obj.readyState);
    if(obj.readyState === 4 && obj.status === 200){
        console.log(obj.response);
    };
};
obj.open("GET",'../file/data.txt",true); //open 메소드는 서버와 연결 1번째파라미터 :전송방법  2번쨰 파라미터: URL , true 는 비동기 통신을 뜻함 true 가 default false 를 작성하면 동기 통신이 된다.
obj.send(); //파라미터에 작성한 data 를 서버로 전송 

1. XHR 인스턴스를 생성할 때 값이 0
통신과 관계가 없으므로 사용하지 않음
5단계이지만 사용 기준으로 보면 4단계

2.  if(obj.readyState === 4 && obj.status === 200) 통신이 끝난 것을 체크 
4는 단지 통신이 끝난 것으로 통신의 성공, 실패를 구분하지 않음
성공하면 성공에 따른 처리, 실패하면 실패에 따른 처리를 해주어야 하므로 이를 구분이 필요 

obj.readyState === XMLHttpRequest.DONE 처럼 텍스트(DONE,LOADING.. )로 비교할 수도 있음 

(구식 형태)

[이벤트 타입]

이벤트 타입                개요
onabort       Request 가 중지되었을 때 발생 
onerror       Request 가 실패했을 때 발생
onload        Request 가 성공했을 때 발생
onloadstart   Request 를 시작한 시점에 발생
onloadend     Request 의 성공,실패와 관계없이 Request 가 종료했을 때 발생 
onprogress    데이터를 수신하는 동안 발생
ontimeout     지정한 타임 아웃 시간을 경과한 시점에 발생           

- 상태에 따라 이벤트가 발생
이벤트 핸들러를 작성하면 호출됨
오래된 브라우저는 지원하지 않음 

const obj = new XMLHttpRequest();
let seq = 0;
const show = (event) => {
    console.log('${event.type}: ${++seq}');

};
const types = ["load","loadstart","loadend","progress","timeout","abort","error"];
types.forEach((type) => {
    obj.addEventListener(type,show,false);
});

target.addEventListener(type, listener[, options]); 
//show 가 핸들러 함수. 이벤트가 발생하면 show 함수를 실행 

발생하는 이벤트 타입을 알아보기 위해 XHT 의 모든 이벤트 타입에 이벤트핸들러를 설정

결과값 
loadstart: 1
progress: 2
load: 3
loadend: 4 

onload 가 먼저 -> 그다음 onloadend
onload 이벤트가 발생하면 onloadend 이벤트 체크할 필요 없음 


- 이벤트 타입 사용 형태 (신식방법)

const obj = new XMLHttpRequest();
obj.onload = () => {
    console.log(obj.response);
};
obj.open("GET","../file/data.txt");
obj.send();

[Request]
메소드/프로퍼티         구분                  의미
open()              파라미터           method,GET,POST 등
                                      url.Request를 보낼 URL
                                      asunc.true:비동기 , false: 동기, 디폴트:true
                                      user name. 인증 목적. 디폴트: 빈문자열
                                      password. 인증 목적. 디폴트 : 빈 문자열

send()              파라미터           서버로 보낼 데이터
                                      안보내고 요청만 할거면 공백
                                      ex)obj.send(JSON.stringify({member:"회원"}))

setRequestHeader()  파라미터           name
                                      value

abort()             없음              Request 취소

upload              프로퍼티          이벤트를 설정하여 파일 업로드 처리 추적
timeout             프로퍼티          타임아웃, 밀리초로 작성


GET : URL 에 해당하는 리소스 전송 요청
POST : 클라이언트 데이터를 서버로 전송 (POST,PUT,DELETE를 구별하지 않고 통합해서하고, 서버에서 로직으로 처리함)
PUT : 클라이언트에서 보낸 데이터를 저장
DELETE : 지정한 리소스를 삭제 

[timeout]
- timeout 프로퍼티
- 서버에서 데이터 수신 시간이
작성한 타임아웃을 초과하면 
ontimeout 이벤트가 발생하며
Request가 취소됨
타임아웃 사간을 밀리초로 작성
- 비동기 통신 Request 에서 사용

const obj = new XMLHTTPRequest();
obj.onload = () => { console.log(obj.response)};
obj.ontimeout = () => {
    console.log("타임아웃 발생");
}
opj.timeout = 2000;
obj.open("POST","../file/timeout_data.txt");
obj.send();

2초 동안 timeout_data.txt 를 수신하지 못하면 ontimeout 이벤트가 발생하며 핸들러를 실행
2초 후에 Request 가 취소되므로 onload 이벤트가 발생하지 않음

[abort()]
메소드로 request를 취소하는 것.


[Response]
const obj = new XMLHTTPRequest();
obj.onload = () => {
    console.log(obj.status) // 200
    console.log(obj.statusText) // OK 
}
obj.open("GET","../file/data.txt");
obj.send();

const obj = new XMLHTTPRequest();
obj.onload = () => {
    console.log(obj.status)  
    console.log(obj.statusText) //404
    if(obj.status === 200){   //체크 
        console.log("파일 수신")
    } 
}
obj.open("GET","../file/없는파일.txt");
obj.send();

!!!! 파일이 없어도 onload 이벤트가 발생. 이때 status 코드는 404 
따라서 obj.status === 200 으로 구체적으로 성공을 체크해야 한다.
onload 이벤트는 통신을 성공했을 때 발생하는 것이므로, 상태 코드와는 관계가 없음 
 

[responseType]
타입                          내용
미작성               디폴트 값이며 텍스트로 반환
blob                BLOB 형태 (Binary Large Object) 이미지,동영상 등의 바이너리 파일
arraybuffer         자바스크립트의 ArrrayBuffer 형태 
document            DOM Document(XML,HTML) 형태 
JSON                JSON 텍스트를 오브젝트로 반환
text                텍스트 형태

- response Type 
response에 설정될 데이터 타임을 문자열로 작성

const obj = new XMLHttpRequest();
obj.responseType = "blob";   //response 에 설정될 타입은 blob
obj.onload = () => { //onload 핸들러 함수
    const url = window.URL.createObjectURL(obj.response);
    const el = document.createElement("img");
    el.onload = () => {
        window.URL.revokeObjectURL(url);
    }
    el.src = url;
    document.getElementById('show').appendChild(el);

};
obj.open("GET","../../immage/rainbow.png"); //요청
obj.send();  //서버로 보낼 데이터 

1. 요청 보내서 사진(BLOB 오브젝트) 가져옴
2. onload 이벤트 발생 
3. window.URL.createObjectURL 함수 호출 파라미터에 서버로부터 받은 response프로퍼티 작성
BLOB 오브젝트에서 BLOB URL 을 생성하는 것
4. img 엘리먼트 생성 
5. img 엘리먼트에 onload 이벤트 핸들러 작성 (el.onload) el.src 에 url을 할당하게 되면 이벤트가 발생하는데 그것을 처리하기 위한것
   el.src = url (서버에서 이미지를 가져옴)
6.  document.getElementById('show').appendChild(el); 엘리먼트 생성, 거기에 img 태그 첨부
 
=> 사진 표시

7. window.URL.revokeObjectURL(url); 이미지 표시 후 BLOB 오브젝트에서 URL을 해제


응답이 텍스트 일때는 일반적으로 response 를 사용하며, JSON.parse() 로 파싱하여 사용 


비동기 통신과 비동기 프로세스의 전반적인 흐름을 단계별로 분기하여 진행 
프레임 워크를 개발하는 형태로 접근 


비동기 통신,프로세스

- 비동기 통신
XMLHTTPRequest 
fetch

- 비공기 프로세스
promise
async,await
for-await-of
Web Workers 등 


[XHR 비동기 통신]
- XHR 비동기 통신 기본 형태 
 function testSend(){ 
        const obj = new XMLHttpRequest();
        obj.onload = function(){ 
            if(this.status === 200){
                console.log(this.response); //화살표 함수를 참조하면 this 가 window 오브젝트 참조 function 써야함. 
            }else{
                console.log("에러 발생")
            }
        };
        obj.open("POST",'http://localhost:5000/'); 
        req = JSON.stringify({
            res:"Ywoosang"
        }); 
        console.log(req); 
        obj.send(req);

- XHR 은 실행 순서를 보장하지 않음 
다수의 XHR 을 짧은 간격으로 실행했을 때 
실행한 순서대로 끝나지 않을 수 있음

- 반드시 실행한 순서로 끝나야 한다면
XHR 자체로는 해결할 수 없으며 
별도의 처리가 필요함

[Promise 비동기 실행]
- Promise 비동기 실행 형태
const obj = new Promise((resolve,reject)=> {
    resolve('성공');
    console.log("1, resolve");
});
obj.then((value)=> {console.log("3. ", value)},
(reason)=> {console.log(reason)});
console.log("2. 마지막");

[비동기 통신+비동기 실행]
- Promise 로 비동기 실행을 하면서
XHR 로 비동기 통신 

const promise = new Promise((resolve,reject)=>{
    console.log("1.XHR생성")
    const obj = new XMLHTTPRequest();
    obj.onload = function(){
        if(this.status === 200){
            resolve(this.response);   
        };
    };
    obj.open("GET","../file/data.txt");
    obj.send();
}); 
promise.then((res)=>{console.log(res)});
console.log("2. 마지막");

결과값:
1. XHR 생성
2. 마지막
"서버 데이터"

- new Promise() 로 비동기 실행 환경 설정
XHR 인스턴스 생성
통신 성공 이벤트 설정
open(),send() 

- onload 이벤트 발생
파일 수신 체크
성공이면 resolve(this.response) 실행
then() 의 첫 번쨰 파라미터 함수 실행


[함수로 분리]
- 비동기 통신, 실행을 함수로 분리


const defaultXHR = {method: "POST"};
function create(param){
    return new Promise((resolve,reject)=>{
        const obj = new XMLHttpRequest();
        obj.onload = function(){
            this.status == 200 ? resolve(this.response) : reject(this);
        };
        const opt = Object.assign({},defaultXHR,param);
        open(opt.method,opt.url);
        send(JSON.stringify({res:"Ywoosang}))
    })
}
const option = {url:'http://localhost:5000/'}
create(option).then((res)=> {console.log(res)})  

Object.assign({},defaultXHR,param); 
첫 번째 파라미터에 두 번째,세번째 파라미터를 덮어씌운다
{method:"POST",url:"http:~"} 가 됨.

- 함수로 분리하면 
공용 함수로 사용 가능
코드 중복 방지 등의 장점이 있음

- 코드는 기본 흐름을 제시하기 위한 것으로
필요한 옵션을 추가
Class 또는 Module 형태로 만드는 것도 생각해 볼 수 있음

[비동기 통신 + async/await]
- Promise + XHR 환경에서
async/await로 
3개의 파일을 순서대로 가져옴

for-of 문으로 반복할 때마다
await 로 인해 Promise 의 resolve() 에서 값을 반환할 때까지 기다림
따라서 실행 순서대로 처리할 수 있음

async function getData(option){
    for (let url of option){
        try{ 
        const res = await create(url);  //resolve 의 param 인 this.response 가 res로 할당
        console.log(JSON.parse(res))
        }catch(xhr){
            console.log(xhr.status)
        }
    }
};
function create(param){
    return new Promise((resolve,reject)=>{
        const obj = new XMLHttpRequest();
        obj.onload = function(){
            this.status == 200 ? resolve(this.response) : reject(this);
        };
        const opt = Object.assign({},defaultXHR,param);
        open(opt.method,opt.url);
        send(JSON.stringify({res:"Ywoosang}))
    })
}
const option = [
    {url:"http://~ "},
    {url:"http://~ "},
    {url:"http://~ "},
];
getData(option)


- 서버에 파일이 없으면 
reject() 가 실행됨
catch() 에서 받으며 XHR 인스턴스가 catch() 의 파라미터에 설정
처리를 중단하지 않고 다음을 실행


[서버로 데이터 전송]

//오브젝트 안에 함수들을 심플하게 만들어야 확장성이 생긴다
const main = {
    point : 500,
    async getPoint(){
        try{
            const data = await create(this.option);
            this.showPoint(data);  //데이터를 넘겨줌
        }catch(xhr){this.serverError(xhr)}; 
    },
    showPoint(data){   //데이터를 받아서 처리 {"sport" :100} 을 받았다 하면 
        console.log(data[this.option.data.name] + this.point); // 100 + 500(this.point)
    },
    serverError(xhr){ }
};
const defaultXHR = {method:"POST"}
function create(param){
    return new Promise((resolve,reject)=>{
        const xhr = new XMLHttpRequest(); //xhr 인스턴스 생성 
        xhr.onload = function(){  //onload 이벤트 핸들러 작성
            this.status == 200 ? resolve(JSON.parse(this.response)) : reject(this);
        };
        xhr.opt = Object.assign({},defaultXHR,param); //변수에 할당하지 않고 xhr 인스턴스에 설정
        setSendData(xhr); //서버로 데이터를 전송하려면 JSON 타입에 맞게 변환해야함. setSendData 함수에서 이를 처리
        xhr.open(xhr.opt.method,xhr.opt.url); 
        xhr.send(xhr.opt.sendData)
    });
};
function setSendData(xhr){
    xhr.opt.sendData= JSON.stringify(xhr.option.data || ""); //여기서 JSON 으로 변경
}

main.option = {
    url : "http: // ~",
    data : {name : "sport"}
};
 
main.getPoint();

- 전송,수시 데이터의 변환
JSON 형태로 변환하는 것은 공통이므로 create 함수에서 수행

- JSON.stringify(), JSON.parse()
수신한 데이터는 resolve() 에서 파싱

[this 참조]
- Promise,then() 환경에서 
this로 호출된 함수의 오브젝트를 참조
main.getPoint() main 오브젝트의 getPoint 함수를 호출


- 호출된 함수의 오브젝트는 
main.getPoint() 에서 main 오브젝트
따라서 main 오브젝트를 참조하게 된다

[이벤트 핸들러 함수 분리]
- XHR 이벤트 핸들러 함수에 
성공/실패 처리를 위한 코드를 작성하면
확상성,가독성이 떨어짐

- 별도의 함수로 분리
- create() 는 메인 흐름을 위한 코드이고, 파생 처리는 분리된 함수에서 함

xhr.onload = function(){  //onload 이벤트 핸들러 작성
        this.status == 200 ? resolve(JSON.parse(this.response)) : reject(this);
    }; 

와 같은 형태로 onload 이벤트에 대응했음 
resolve 함수 파싱할때 파싱 에러 날 수도 있으므로 고려
함수로 분리해 확장성 있게 접근

onLoad(xhr,resolve,reject){
    if(xhr.status !== 200){
        xhr.errorCode = "not200";
        return reject(xhr);
    };
    try{
        const data = JSON.parse(xhr.response);
        resolve(data);
    }catch{
        //"JSON.parse 에러"
    xhr.errorCode = "json";
    reject(xhr);
    };
},
onError(xhr,reject){
    reject(xhr)
}


[Fetch]
- Fetch API
비동기 환경에서 비동기로 통신 
XMLHttpRequest 와 비슷하지만 
CORS,HTTP 관련을 망라하여 지원 
통신에 성공하면 Promise 인스턴스를  반환 

const url = `${window.origin}/hotel/img`  
fetch(url).then((response)=>{
    return response.blob();
}).then((blob)=>{
    const el = document.querySelector("img");
    el.src = URL.createObjectURL(blob);
})

API 는 일반적으로 new로 인스턴스를 생성하지만
Fetch는 fetch() 형태로 호출.
 
1. fetch(url).then((response)=>{...}
fetch(url) 의 파라미터에 작성한 URL 의 code.png 파일 정보를 비동기로 가져옴.

2. 파일 정보 수신이 성공적으로 끝나면 
then() 의 첫 번쨰 파라미터 함수가 실행되며 
파일 정보가 response 파라미터에 설정됨.
=> resolve 가 실행된 것이라고 볼 수 있음 

3. then() 사용은 Promise 처리를 뜻함 
즉, 비동기 환경에서 비동기로 통신

4. return response.blob();
blob() 은 response 에서 Blob 오브젝트를 구함.
구한 오브젝트를 반환하지 않고 Promise 인스턴스 를 반환 
return 의 표현식의 평과 결과는 then 의 blob 에 설정됨

5. then((blob)=> {...}
    앞에서 구한 Blob 오브젝트가 blob 에 설정
)

6. el.src = URL.createObject(blob);
blob 오브젝트의 이미지 URL 을 문자열로 반환

7. <img> 의 src 에 URL 을 할당하면 이미지가 표시

- fetch() 가 비동기 환경에서 실행하므로 
async/await 를 사용할 수 있음.

